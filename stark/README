

Stark 组件使用说明：
    一：首先需将 stark 组件 copy 到创建的 django 项目中，然后在 settings 文件中对
    stark 组件进行应用注册，如下：
        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'stark.apps.StarkConfig',   ---> stark 组件注册方法
            'app01.apps.App01Config',
            'app02.apps.App02Config',
        ]

    二：导入 stark 组件中的 StarkHandler 基类和实例化对象 site
        路径：from stark.service.v1 import StarkHandler, site
    三：在应用中创建 stark 模块，在该模块中自定义 Handler 类，然后使用导入的 site 对
           象调用积累中的 register 注册方法并传参，传参的内容包括 (models.创建表类名,
           自定义 Handler 类名), 如下示例：
           class UserInfoHandler(StarkHandler):

                # 定制页面显示的列,并调用基类中自定义显示列及选择字段显示中文方法
                list_display = [StarkHandler.display_checkbox, 'name',
                                get_choices_text('性别', 'gender'), 'age',
                                'email', 'depart',
                                get_choices_text('班级', 'classes'),
                                StarkHandler.display_edit, StarkHandler.display_del]

                has_add_btn = True
                # def get_list_display(self):
                #     自定义扩展，即根据不同的用户显示不同的列
                #     :return:
                #     return ['name', 'age', 'email']
                model_from_class = UserInfoModelForm
                # order_list = ['name']  # 自定义排序方法
                search_list = ['name__contains', 'email__contains']  # 定义模糊搜索条件

                # def multi_init(self):
                #     自定义批量操作方法，在该函数中做对批量数据的处理
                #     :return:
                #     pass
                #
                # multi_init.text = '批量初始化'  # 给该函数对象使用 text 方法设置一个中文内容用以在页面显示
                # 重写基类中的 active_list 列表，使其显示下拉按钮框中的内容,
                # 列表中的内容为执行基类中的 action_multi_delete 批量删除函数
                action_list = [StarkHandler.action_multi_delete, ]

                def save(self, form, is_update=False):
                    重写预留钩子 save 方法，并指定不能为空字段的值
                    :param form:
                    :param is_update:
                    form.instance.depart_id = 1
                    form.save()

            site.register(models.UserInfo, UserInfoHandler)

    四：可在自定义子类中重写基类中 list_display 列表变量，使其显示不同的列，基类中默认不显示
        方法：list_display = [StarkHandler.display_checkbox, 'name',
                                get_choices_text('性别', 'gender'), 'age',
                                'email', 'depart',
                                get_choices_text('班级', 'classes'),
                                StarkHandler.display_edit, StarkHandler.display_del]
        在重写自定义列中可根据需要的不同显示不同的列数类容，其中包含数据库表中需要显示的字段，及常用
        方法，
        常用方法说明：Stark.display_checkbox ,用于在每一行数据前显示选择按钮，用来今次那个批量操作
                    Stark.display_edit , 用于在表格中显示编辑表头及每行数据中的编辑按钮
                    Stark.display_del , 用于在表格中显示删除表头及每行数据中的删除按钮
                    get_choices_text('表头','字段名') ， 用于显示数据库表中为 choices 选择类型的数据，
                                        第一个参数为表头显示的内容，
                                        第二个参数则为数据库表中的字段名

    五、下拉框批量操作按钮的实现方法：
        在 Handler 子类中，重新定义基类中的 action_list 列表变量，变量中的内容为使用 StarkHandler 基类
        调用基类中 action_multi_delete 方法，即显示删除按钮如下：
            action_list = [StarkHandler.action_multi_delete, ]
        也可在 Handler 子类中使用函数方法自定义下拉框中的内容，并在函数中对数据进行相应的操作，然后将自定义
        批量操作函数名添加到 action_list 列表中即可。
        如下自定义批量初始化方法：
            def multi_init(self):
                自定义批量操作方法，在该函数中做对批量数据的处理
                :return:
                ………… 对数据进行相应处理代码

            multi_init.text = '批量初始化'  # 给该函数对象使用 text 方法设置一个中文内容用以在页面显示
            action_list = [StarkHandler.action_multi_delete, multi_init, ]

    六：重写 StarkHandler 基类中 get_list_display 自定义显示页面中表格不同列方法，返回的内容为列表，
        列表中的数据则为数据库表中需要显示的字段名，如下示例：
        def get_list_display(self):
            自定义扩展，即根据不同的用户显示不同的列
            :return:

            return ['name', 'age', 'email']

